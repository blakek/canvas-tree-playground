{"version":3,"sources":["index.js"],"names":["canvas","ctx","scale","root","document","getElementById","createElement","style","position","height","width","appendChild","getContext","handleResize","event","canvasDimensions","getBoundingClientRect","background","createLinearGradient","addColorStop","color","fillStyle","fillRect","strokeStyle","lineWidth","beginPath","moveTo","startX","startY","draw","x","y","distance","iteration","angle","Math","PI","x2","cos","y2","sin","lineTo","stroke","run","window","addEventListener","setup"],"mappings":"8IAAA,gBAKIA,EAEAC,EAEEC,EAAQ,EAAI,GA2ClB,WACE,IAAMC,EAAOC,SAASC,eAAe,SACrCL,EAASI,SAASE,cAAc,WAGzBC,MAAMC,SAAW,WACxBR,EAAOO,MAAME,OAAS,QACtBT,EAAOO,MAAMG,MAAQ,QAGrBV,EAASG,EAAKQ,YAAYX,GAC1BC,EAAMD,EAAOY,WAAW,MAGxB,IAAMC,EAAe,SAAAC,GACnB,IAAMC,EAAmBf,EAAOgB,wBAChChB,EAAOS,OAASM,EAAiBN,OACjCT,EAAOU,MAAQK,EAAiBL,MA1CpC,WACE,IAAMO,EAAahB,EAAIiB,qBAAqB,EAAG,EAAG,EAAGlB,EAAOS,QAC5DQ,EAAWE,aAAa,EAAG,QAC3BF,EAAWE,aAAa,GAAK,cAC7BF,EAAWE,aAAa,EAAG,cAgBfC,EAfPH,EAgBLhB,EAAIoB,UAAYD,EAChBnB,EAAIqB,SAAS,EAAG,EAAGtB,EAAOU,MAAOV,EAAOS,QAfxCR,EAAIsB,YAAc,OAClBtB,EAAIuB,UAAY,IAEhBvB,EAAIwB,YACJxB,EAAIyB,OAAO1B,EAAOU,MAAQ,EAAGV,EAAOS,QAStC,IAAcW,EAPZ,IAAMO,EAAS3B,EAAOU,MAAQ,EACxBkB,EAAS5B,EAAOS,QA5BxB,SAASoB,EAAKC,EAAGC,EAAGC,GAA0B,IAAhBC,EAAe,uDAAH,EAClCC,GAAqB,IAAZD,EAAmB,KAAOE,KAAKC,GACxCC,EAAKL,EAAWG,KAAKG,IAAIJ,GAASJ,EAClCS,EAAKP,EAAWG,KAAKK,IAAIN,GAASH,EAExC9B,EAAIwC,OAAOJ,EAAIE,GAEXP,EAAW,KACbH,EAAKQ,EAAIE,EAAIP,EAAW,IAAKC,EAAY,GACzChC,EAAIyB,OAAOW,EAAIE,GACfV,EAAKQ,EAAIE,EAAIP,EAAW,IAAKC,EAAY,KAoB3CJ,CAAKF,EAAQC,EAAS5B,EAAOS,OAASP,EAAS,GAC/CD,EAAIyC,SA0BFC,IAIF9B,IAGA+B,OAAOC,iBAAiB,SAAUhC,GAlEpCiC,I","file":"static/js/main.05558c59.chunk.js","sourcesContent":["// @ts-check\n\nimport \"./index.css\";\n\n/** @type {HTMLCanvasElement} */\nlet canvas;\n/** @type {CanvasRenderingContext2D} */\nlet ctx;\n\nconst scale = 1 / 3;\n\nsetup();\n\nfunction draw(x, y, distance, iteration = 0) {\n  const angle = (iteration * 0.15 + 1.5) * Math.PI; //+ (Math.random() - 0.5);\n  const x2 = distance * Math.cos(angle) + x;\n  const y2 = distance * Math.sin(angle) + y;\n\n  ctx.lineTo(x2, y2);\n\n  if (distance > 10) {\n    draw(x2, y2, distance / 1.2, iteration + 1);\n    ctx.moveTo(x2, y2);\n    draw(x2, y2, distance / 1.2, iteration - 1);\n  }\n}\n\nfunction run() {\n  const background = ctx.createLinearGradient(0, 0, 0, canvas.height);\n  background.addColorStop(0, \"blue\");\n  background.addColorStop(0.5, \"dodgerblue\");\n  background.addColorStop(1, \"papayawhip\");\n  fill(background);\n\n  ctx.strokeStyle = \"#110\";\n  ctx.lineWidth = 1.5;\n\n  ctx.beginPath();\n  ctx.moveTo(canvas.width / 2, canvas.height);\n\n  const startX = canvas.width / 2;\n  const startY = canvas.height;\n\n  draw(startX, startY, (canvas.height * scale) / 3);\n  ctx.stroke();\n}\n\nfunction fill(color) {\n  ctx.fillStyle = color;\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n}\n\nfunction setup() {\n  const root = document.getElementById(\"root\");\n  canvas = document.createElement(\"canvas\");\n\n  // Style canvas to be fullscreen\n  canvas.style.position = \"absolute\";\n  canvas.style.height = \"100vh\";\n  canvas.style.width = \"100vw\";\n\n  // Add canvas to the DOM\n  canvas = root.appendChild(canvas);\n  ctx = canvas.getContext(\"2d\");\n\n  // Get actual size of canvas\n  const handleResize = event => {\n    const canvasDimensions = canvas.getBoundingClientRect();\n    canvas.height = canvasDimensions.height;\n    canvas.width = canvasDimensions.width;\n    run();\n  };\n\n  // Set initial canvas size\n  handleResize();\n\n  // Set up resize handler\n  window.addEventListener(\"resize\", handleResize);\n}\n"],"sourceRoot":""}